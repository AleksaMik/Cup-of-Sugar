{"version":3,"sources":["components/SignupForm.js","components/LoginForm.js","pages/Home.js","pages/SearchRentals.js","utils/localStorage.js","pages/SavedRentals.js","App.js","index.js","utils/auth.js"],"names":["SignupForm","useState","username","email","password","userFormData","setUserFormData","validated","showAlert","setShowAlert","useMutation","ADD_USER","addUser","error","handleInputChange","event","target","name","value","handleFormSubmit","preventDefault","currentTarget","checkValidity","stopPropagation","variables","data","Auth","login","token","console","Form","noValidate","onSubmit","Alert","dismissible","onClose","show","variant","Group","Label","htmlFor","Control","type","placeholder","onChange","required","Feedback","disabled","LoginForm","LOGIN_USER","Home","SearchRentals","saveRentalIds","rentalIdArr","length","localStorage","setItem","JSON","stringify","removeItem","removeRentalId","rentalId","savedRentalIds","getItem","parse","savedRentalsIds","updatedSavedRentalIds","filter","savedRentalId","SavedRentals","useQuery","GET_ME","userData","me","REMOVE_RENTAL","removeRental","handleDeleteRental","loggedIn","getToken","Error","savedRentals","map","rental","Jumbotron","fluid","className","Container","Card","border","Body","Title","title","Text","Button","onClick","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","path","element","Post","ReactDOM","render","StrictMode","document","getElementById","jwt","require","secret","module","exports","authMiddleware","req","body","query","split","pop","trim","verify","maxAge","user","log","signToken","payload","_id","sign","expiresIn"],"mappings":"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","file":"static/js/main.6495d892.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Form, Button, Alert } from \"react-bootstrap\";\r\nimport { useMutation } from \"@apollo/react-hooks\";\r\n\r\nimport Auth from \"../utils/auth\";\r\nimport { ADD_USER } from \"../utils/mutations\";\r\n\r\nconst SignupForm = () => {\r\n  // set initial form state\r\n  const [userFormData, setUserFormData] = useState({\r\n    username: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n  // set state for form validation\r\n  const [validated] = useState(false);\r\n  // set state for alert\r\n  const [showAlert, setShowAlert] = useState(false);\r\n\r\n  const [addUser, { error }] = useMutation(ADD_USER);\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserFormData({ ...userFormData, [name]: value });\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    // check if form has everything (as per react-bootstrap docs)\r\n    const form = event.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n\r\n    try {\r\n      const { data } = await addUser({\r\n        variables: { ...userFormData },\r\n      });\r\n      Auth.login(data.addUser.token);\r\n    } catch (err) {\r\n      console.error(error);\r\n      setShowAlert(true);\r\n    }\r\n\r\n    setUserFormData({\r\n      username: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* This is needed for the validation functionality above */}\r\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\r\n        {/* show alert if server response is bad */}\r\n        <Alert\r\n          dismissible\r\n          onClose={() => setShowAlert(false)}\r\n          show={showAlert}\r\n          variant=\"danger\"\r\n        >\r\n          Something went wrong with your signup!\r\n        </Alert>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor=\"username\">Username</Form.Label>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"Your username\"\r\n            name=\"username\"\r\n            onChange={handleInputChange}\r\n            value={userFormData.username}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            Username is required!\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor=\"email\">Email</Form.Label>\r\n          <Form.Control\r\n            type=\"email\"\r\n            placeholder=\"Your email address\"\r\n            name=\"email\"\r\n            onChange={handleInputChange}\r\n            value={userFormData.email}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            Email is required!\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor=\"password\">Password</Form.Label>\r\n          <Form.Control\r\n            type=\"password\"\r\n            placeholder=\"Your password\"\r\n            name=\"password\"\r\n            onChange={handleInputChange}\r\n            value={userFormData.password}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            Password is required!\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Button\r\n          disabled={\r\n            !(\r\n              userFormData.username &&\r\n              userFormData.email &&\r\n              userFormData.password\r\n            )\r\n          }\r\n          type=\"submit\"\r\n          variant=\"success\"\r\n        >\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SignupForm;\r\n","import React, { useState } from \"react\";\r\nimport { useMutation } from \"@apollo/react-hooks\";\r\nimport { Form, Button, Alert } from \"react-bootstrap\";\r\n\r\n// import { loginUser } from '../utils/API';\r\nimport { LOGIN_USER } from \"../utils/mutations\";\r\nimport Auth from \"../utils/auth\";\r\n\r\nconst LoginForm = () => {\r\n  const [userFormData, setUserFormData] = useState({ email: \"\", password: \"\" });\r\n  const [login, { error }] = useMutation(LOGIN_USER);\r\n  const [validated] = useState(false);\r\n  const [showAlert, setShowAlert] = useState(false);\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserFormData({ ...userFormData, [name]: value });\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    // check if form has everything (as per react-bootstrap docs)\r\n    const form = event.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n    try {\r\n      const { data } = await login({\r\n        variables: { ...userFormData },\r\n      });\r\n      Auth.login(data.login.token);\r\n    } catch (err) {\r\n      console.error(error);\r\n      setShowAlert(true);\r\n    }\r\n\r\n    setUserFormData({\r\n      username: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\r\n        <Alert\r\n          dismissible\r\n          onClose={() => setShowAlert(false)}\r\n          show={showAlert}\r\n          variant=\"danger\"\r\n        >\r\n          Something went wrong with your login credentials!\r\n        </Alert>\r\n        <Form.Group>\r\n          <Form.Label htmlFor=\"email\">Email</Form.Label>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"Your email\"\r\n            name=\"email\"\r\n            onChange={handleInputChange}\r\n            value={userFormData.email}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            Email is required!\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor=\"password\">Password</Form.Label>\r\n          <Form.Control\r\n            type=\"password\"\r\n            placeholder=\"Your password\"\r\n            name=\"password\"\r\n            onChange={handleInputChange}\r\n            value={userFormData.password}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            Password is required!\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Button\r\n          disabled={!(userFormData.email && userFormData.password)}\r\n          type=\"submit\"\r\n          variant=\"success\"\r\n        >\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LoginForm;\r\n","import React from \"react\";\r\nimport Signup from \"../components/SignupForm\";\r\nimport Login from \"../components/LoginForm\";\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div>\r\n      <Signup />\r\n      <Login />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from 'react'\r\n\r\nfunction SearchRentals() {\r\n  return (\r\n    <div>SearchRentals</div>\r\n  )\r\n}\r\n\r\nexport default SearchRentals","export const getSavedRentalIds = () => {\r\n    const savedRentalIds = localStorage.getItem('saved_rentals')\r\n      ? JSON.parse(localStorage.getItem('saved_rentals'))\r\n      : [];\r\n  \r\n    return savedRentalIds;\r\n  };\r\n  \r\n  export const saveRentalIds = (rentalIdArr) => {\r\n    if (rentalIdArr.length) {\r\n      localStorage.setItem('saved_rentals', JSON.stringify(rentalIdArr));\r\n    } else {\r\n      localStorage.removeItem('saved_rentals');\r\n    }\r\n  };\r\n  \r\n  export const removeRentalId = (rentalId) => {\r\n    const savedRentalIds = localStorage.getItem('saved_rentals')\r\n      ? JSON.parse(localStorage.getItem('saved_rentals'))\r\n      : null;\r\n  \r\n    if (!savedRentalsIds) {\r\n      return false;\r\n    }\r\n  \r\n    const updatedSavedRentalIds = savedRentalIds?.filter((savedRentalId) => savedRentalId !== rentalId);\r\n    localStorage.setItem('saved_rental', JSON.stringify(updatedSavedRentalIds));\r\n  \r\n    return true;\r\n  };\r\n  ","import React from \"react\";\r\n// import {\r\n//   Jumbotron,\r\n//   Card,\r\n//   Button,\r\n//   Container,\r\n// } from \"react-bootstrap\";\r\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\r\nimport Auth from \"../utils/auth\";\r\nimport { removeRentalId, saveRentalIds } from \"../utils/localStorage\";\r\nimport { GET_ME } from \"../utils/queries\";\r\nimport { REMOVE_RENTAL } from \"../utils/mutations\";\r\nconst SavedRentals = () => {\r\n  const { data } = useQuery(GET_ME);\r\n  const userData = data?.me || [];\r\n\r\n  const [removeRental,{ error }] = useMutation(REMOVE_RENTAL);\r\n  const handleDeleteRental = async (rentalId) => {\r\n    const token = Auth.loggedIn()\r\n ? Auth.getToken() : null; if (!token) {\r\nreturn false;\r\n }  \r\n try {\r\n  const response = await removeRental({\r\n    variables: { rentalId: rentalId },\r\n  });\r\n\r\n  if (!response) {\r\n    throw new Error(\"Sorry, something went wrong\");\r\n  }\r\n  removeRentalId(rentalId);\r\n } catch (err) {\r\n  console.error(error);\r\n }\r\n}; \r\n\r\n// sync localStorage with what was returned from the userData query\r\n\r\nconst savedRentalIds = userData.savedRentals.map((rental) => rental.rentalId);\r\nsaveRentalIds(saveRentalIds);\r\n\r\n\r\n  return (\r\n    <>\r\n\r\n    <Jumbotron fluid className=\"text-light bg-dark\"> <Container>\r\n    <h1>Viewing saved books!</h1>\r\n  </Container>\r\n  </Jumbotron>\r\n  <Container>\r\n    <h2>\r\n      {userData.savedRentals.length ? `Viewing ${userData.savedRentals.length} saved ${userData.savedRentals.length === 1 ? \"rental\" : \"rentals\"}:`\r\n      : \"No saved rentals!\"\r\n      }\r\n    </h2>\r\n    {userData.savedRentals.map((rental) => {\r\n            return (\r\n              < Card key={rental.rentalId} border=\"dark\">\r\n    <Card.Body>\r\n    <Card.Title>{rental.title}</Card.Title>\r\n    <Card.Text>(rental.description)</Card.Text>\r\n    <Button\r\n className=\"btn-block btn-danger\"\r\n onClick={() => handleDeleteRental(rental.rentalId)}\r\n>\r\n Delete this Rental!\r\n</Button>\r\n</Card.Body>\r\n</Card>\r\n  );\r\n  })}\r\n  </Container>\r\n</>\r\n  );\r\n};\r\n\r\nexport default SavedRentals;\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\r\nimport {\r\n    ApolloClient,\r\n    InMemoryCache,\r\n    ApolloProvider,\r\n    createHttpLink,\r\n} from '@apollo/client';\r\nimport { setContext } from '@apollo/client/link/context';\r\n\r\nimport Home from './pages/Home';\r\nimport Search from './pages/SearchRentals';\r\nimport Saved from './pages/SavedRentals';\r\n// import Post from './pages/PostRentals';\r\n// import { StoreProvider } from './utils/GlobalState';\r\n\r\n\r\nconst httpLink = createHttpLink({\r\n    uri: '/graphql',\r\n});\r\n\r\nconst authLink = setContext((_, {headers}) => {\r\n    const token = localStorage.getItem('id_token');\r\n    return {\r\n        headers: {\r\n            ...headers,\r\n            authorization: token ? `Bearer ${token}` : '',\r\n        },\r\n    };\r\n});\r\n\r\nconst client = new ApolloClient({\r\n    link: authLink.concat(httpLink),\r\n    cache: new InMemoryCache(),\r\n});\r\n\r\nfunction App() {\r\n    return (\r\n        <ApolloProvider client={client}>\r\n            <Router>\r\n                <div>\r\n                    <Routes>\r\n                        <Route\r\n                        path='/' element={<Home />}/>\r\n                        <Route\r\n                        path='/search' element={<Search />}/>\r\n                        <Route\r\n                        path='/saved' element={<Saved />}/>\r\n                        <Route\r\n                        path='/post' element={<Post />}/>\r\n                    </Routes>\r\n                </div>\r\n            </Router>\r\n        </ApolloProvider>\r\n    );\r\n}\r\n\r\nexport default App; ","import React from 'react';\r\nimport  ReactDOM  from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n","const jwt = require(\"jsonwebtoken\");\r\nconst secret = \"supersecret\";\r\nconst expiration = \"2h\";\r\n\r\nmodule.exports = {\r\n  authMiddleware: function ({ req }) {\r\n    let token = req.body.token || req.query.token || req.headers.authorization;\r\n\r\n    if (req.headers.authorization) {\r\n      token = token.split(\" \").pop().trim();\r\n    }\r\n    if (!token) {\r\n      return req;\r\n    }\r\n    try {\r\n      const { data } = jwt.verify(token, secret, { maxAge: expiration });\r\n      req.user = data;\r\n    } catch {\r\n      console.log(\"Invalid token\");\r\n    }\r\n    return req;\r\n  },\r\n  signToken: function ({ email, name, _id }) {\r\n    const payload = { email, name, _id };\r\n    return jwt.sign({ data: payload }, secret, { expiresIn: expiration });\r\n  },\r\n};\r\n"],"sourceRoot":""}